{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { productConstants } from \"./constants\"; // new action\n\nconst getProducts = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: productConstants.GET_ALL_PRODUCTS_REQUEST\n      });\n      const res = await axios.post(`product/getProducts`);\n\n      if (res.status === 200) {\n        const {\n          products\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_SUCCESS,\n          payload: {\n            products\n          }\n        });\n      } else {\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // modified actrion\n\n\nexport const addProduct = form => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: productConstants.ADD_PRODUCT_REQUEST\n      });\n      const res = await axios.post(`product/create`, form);\n\n      if (res.status === 201) {\n        dispatch({\n          type: productConstants.ADD_PRODUCT_SUCCESS\n        });\n        dispatch(getProducts());\n      } else {\n        dispatch({\n          type: productConstants.ADD_PRODUCT_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // new action\n\nexport const deleteProductById = payload => {\n  return async dispatch => {\n    try {\n      const res = await axios.delete(`product/deleteProductById`, {\n        data: {\n          payload\n        }\n      });\n      dispatch({\n        type: productConstants.DELETE_PRODUCT_BY_ID_REQUEST\n      });\n\n      if (res.status === 202) {\n        dispatch({\n          type: productConstants.DELETE_PRODUCT_BY_ID_SUCCESS\n        });\n        dispatch(getProducts());\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: productConstants.DELETE_PRODUCT_BY_ID_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/charr/Desktop/ahlem/admin/src/actions/product.action.js"],"names":["axios","productConstants","getProducts","dispatch","type","GET_ALL_PRODUCTS_REQUEST","res","post","status","products","data","GET_ALL_PRODUCTS_SUCCESS","payload","GET_ALL_PRODUCTS_FAILURE","error","console","log","addProduct","form","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILURE","deleteProductById","delete","DELETE_PRODUCT_BY_ID_REQUEST","DELETE_PRODUCT_BY_ID_SUCCESS","DELETE_PRODUCT_BY_ID_FAILURE"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,gBAAT,QAAiC,aAAjC,C,CAEA;;AACA,MAAMC,WAAW,GAAG,MAAM;AACxB,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEH,gBAAgB,CAACI;AAAzB,OAAD,CAAR;AACA,YAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAY,qBAAZ,CAAlB;;AACA,UAAID,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAM;AAAEC,UAAAA;AAAF,YAAeH,GAAG,CAACI,IAAzB;AACAP,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEH,gBAAgB,CAACU,wBADhB;AAEPC,UAAAA,OAAO,EAAE;AAAEH,YAAAA;AAAF;AAFF,SAAD,CAAR;AAID,OAND,MAMO;AACLN,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEH,gBAAgB,CAACY;AAAzB,SAAD,CAAR;AACD;AACF,KAZD,CAYE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAhBD;AAiBD,CAlBD,C,CAoBA;;;AACA,OAAO,MAAMG,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAO,MAAOf,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEH,gBAAgB,CAACkB;AAAzB,OAAD,CAAR;AACA,YAAMb,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAY,gBAAZ,EAA6BW,IAA7B,CAAlB;;AACA,UAAIZ,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtBL,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEH,gBAAgB,CAACmB;AAAzB,SAAD,CAAR;AACAjB,QAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACD,OAHD,MAGO;AACLC,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEH,gBAAgB,CAACoB;AAAzB,SAAD,CAAR;AACD;AACF,KATD,CASE,OAAOP,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;AAcD,CAfM,C,CAiBP;;AACA,OAAO,MAAMQ,iBAAiB,GAAIV,OAAD,IAAa;AAC5C,SAAO,MAAOT,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMG,GAAG,GAAG,MAAMN,KAAK,CAACuB,MAAN,CAAc,2BAAd,EAA0C;AAC1Db,QAAAA,IAAI,EAAE;AAAEE,UAAAA;AAAF;AADoD,OAA1C,CAAlB;AAGAT,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEH,gBAAgB,CAACuB;AAAzB,OAAD,CAAR;;AACA,UAAIlB,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtBL,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEH,gBAAgB,CAACwB;AAAzB,SAAD,CAAR;AACAtB,QAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACD,OAHD,MAGO;AACL,cAAM;AAAEY,UAAAA;AAAF,YAAYR,GAAG,CAACI,IAAtB;AACAP,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEH,gBAAgB,CAACyB,4BADhB;AAEPd,UAAAA,OAAO,EAAE;AACPE,YAAAA;AADO;AAFF,SAAD,CAAR;AAMD;AACF,KAjBD,CAiBE,OAAOA,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GArBD;AAsBD,CAvBM","sourcesContent":["import axios from \"../helpers/axios\";\nimport { productConstants } from \"./constants\";\n\n// new action\nconst getProducts = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: productConstants.GET_ALL_PRODUCTS_REQUEST });\n      const res = await axios.post(`product/getProducts`);\n      if (res.status === 200) {\n        const { products } = res.data;\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_SUCCESS,\n          payload: { products },\n        });\n      } else {\n        dispatch({ type: productConstants.GET_ALL_PRODUCTS_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// modified actrion\nexport const addProduct = (form) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: productConstants.ADD_PRODUCT_REQUEST });\n      const res = await axios.post(`product/create`, form);\n      if (res.status === 201) {\n        dispatch({ type: productConstants.ADD_PRODUCT_SUCCESS });\n        dispatch(getProducts());\n      } else {\n        dispatch({ type: productConstants.ADD_PRODUCT_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// new action\nexport const deleteProductById = (payload) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.delete(`product/deleteProductById`, {\n        data: { payload },\n      });\n      dispatch({ type: productConstants.DELETE_PRODUCT_BY_ID_REQUEST });\n      if (res.status === 202) {\n        dispatch({ type: productConstants.DELETE_PRODUCT_BY_ID_SUCCESS });\n        dispatch(getProducts());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: productConstants.DELETE_PRODUCT_BY_ID_FAILURE,\n          payload: {\n            error,\n          },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}